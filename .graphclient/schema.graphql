schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Loan {
  id: ID!
  poolId: Bytes!
  tokensHeld: [BigInt!]!
  heldLiquidity: BigInt!
  liquidity: BigInt!
  lpTokens: BigInt!
  rateIndex: BigInt!
  blockNumber: BigInt!
}

type LoanData {
  id: ID!
  poolId: Bytes!
  tokensHeld: [BigInt!]!
  heldLiquidity: BigInt!
  liquidity: BigInt!
  lpTokens: BigInt!
  rateIndex: BigInt!
  blockNumber: BigInt!
}

input LoanData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolId: Bytes
  poolId_not: Bytes
  poolId_in: [Bytes!]
  poolId_not_in: [Bytes!]
  poolId_contains: Bytes
  poolId_not_contains: Bytes
  tokensHeld: [BigInt!]
  tokensHeld_not: [BigInt!]
  tokensHeld_contains: [BigInt!]
  tokensHeld_contains_nocase: [BigInt!]
  tokensHeld_not_contains: [BigInt!]
  tokensHeld_not_contains_nocase: [BigInt!]
  heldLiquidity: BigInt
  heldLiquidity_not: BigInt
  heldLiquidity_gt: BigInt
  heldLiquidity_lt: BigInt
  heldLiquidity_gte: BigInt
  heldLiquidity_lte: BigInt
  heldLiquidity_in: [BigInt!]
  heldLiquidity_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  lpTokens: BigInt
  lpTokens_not: BigInt
  lpTokens_gt: BigInt
  lpTokens_lt: BigInt
  lpTokens_gte: BigInt
  lpTokens_lte: BigInt
  lpTokens_in: [BigInt!]
  lpTokens_not_in: [BigInt!]
  rateIndex: BigInt
  rateIndex_not: BigInt
  rateIndex_gt: BigInt
  rateIndex_lt: BigInt
  rateIndex_gte: BigInt
  rateIndex_lte: BigInt
  rateIndex_in: [BigInt!]
  rateIndex_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum LoanData_orderBy {
  id
  poolId
  tokensHeld
  heldLiquidity
  liquidity
  lpTokens
  rateIndex
  blockNumber
}

input Loan_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolId: Bytes
  poolId_not: Bytes
  poolId_in: [Bytes!]
  poolId_not_in: [Bytes!]
  poolId_contains: Bytes
  poolId_not_contains: Bytes
  tokensHeld: [BigInt!]
  tokensHeld_not: [BigInt!]
  tokensHeld_contains: [BigInt!]
  tokensHeld_contains_nocase: [BigInt!]
  tokensHeld_not_contains: [BigInt!]
  tokensHeld_not_contains_nocase: [BigInt!]
  heldLiquidity: BigInt
  heldLiquidity_not: BigInt
  heldLiquidity_gt: BigInt
  heldLiquidity_lt: BigInt
  heldLiquidity_gte: BigInt
  heldLiquidity_lte: BigInt
  heldLiquidity_in: [BigInt!]
  heldLiquidity_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  lpTokens: BigInt
  lpTokens_not: BigInt
  lpTokens_gt: BigInt
  lpTokens_lt: BigInt
  lpTokens_gte: BigInt
  lpTokens_lte: BigInt
  lpTokens_in: [BigInt!]
  lpTokens_not_in: [BigInt!]
  rateIndex: BigInt
  rateIndex_not: BigInt
  rateIndex_gt: BigInt
  rateIndex_lt: BigInt
  rateIndex_gte: BigInt
  rateIndex_lte: BigInt
  rateIndex_in: [BigInt!]
  rateIndex_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Loan_orderBy {
  id
  poolId
  tokensHeld
  heldLiquidity
  liquidity
  lpTokens
  rateIndex
  blockNumber
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Pool {
  id: ID!
  address: Bytes!
  cfmm: Bytes!
  protocolId: BigInt!
  protocol: Bytes!
  count: BigInt!
}

type PoolData {
  id: ID!
  address: Bytes!
  tokenBalances: [BigDecimal!]!
  lpTokenBalance: BigDecimal!
  lpTokenBorrowed: BigDecimal!
  lpTokenBorrowedPlusInterest: BigDecimal!
  lpTokenTotal: BigDecimal!
  borrowRate: BigDecimal!
  accFeeIndex: BigDecimal!
  lastFeeIndex: BigDecimal!
  lastBlockNumber: BigInt!
}

input PoolData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  tokenBalances: [BigDecimal!]
  tokenBalances_not: [BigDecimal!]
  tokenBalances_contains: [BigDecimal!]
  tokenBalances_contains_nocase: [BigDecimal!]
  tokenBalances_not_contains: [BigDecimal!]
  tokenBalances_not_contains_nocase: [BigDecimal!]
  lpTokenBalance: BigDecimal
  lpTokenBalance_not: BigDecimal
  lpTokenBalance_gt: BigDecimal
  lpTokenBalance_lt: BigDecimal
  lpTokenBalance_gte: BigDecimal
  lpTokenBalance_lte: BigDecimal
  lpTokenBalance_in: [BigDecimal!]
  lpTokenBalance_not_in: [BigDecimal!]
  lpTokenBorrowed: BigDecimal
  lpTokenBorrowed_not: BigDecimal
  lpTokenBorrowed_gt: BigDecimal
  lpTokenBorrowed_lt: BigDecimal
  lpTokenBorrowed_gte: BigDecimal
  lpTokenBorrowed_lte: BigDecimal
  lpTokenBorrowed_in: [BigDecimal!]
  lpTokenBorrowed_not_in: [BigDecimal!]
  lpTokenBorrowedPlusInterest: BigDecimal
  lpTokenBorrowedPlusInterest_not: BigDecimal
  lpTokenBorrowedPlusInterest_gt: BigDecimal
  lpTokenBorrowedPlusInterest_lt: BigDecimal
  lpTokenBorrowedPlusInterest_gte: BigDecimal
  lpTokenBorrowedPlusInterest_lte: BigDecimal
  lpTokenBorrowedPlusInterest_in: [BigDecimal!]
  lpTokenBorrowedPlusInterest_not_in: [BigDecimal!]
  lpTokenTotal: BigDecimal
  lpTokenTotal_not: BigDecimal
  lpTokenTotal_gt: BigDecimal
  lpTokenTotal_lt: BigDecimal
  lpTokenTotal_gte: BigDecimal
  lpTokenTotal_lte: BigDecimal
  lpTokenTotal_in: [BigDecimal!]
  lpTokenTotal_not_in: [BigDecimal!]
  borrowRate: BigDecimal
  borrowRate_not: BigDecimal
  borrowRate_gt: BigDecimal
  borrowRate_lt: BigDecimal
  borrowRate_gte: BigDecimal
  borrowRate_lte: BigDecimal
  borrowRate_in: [BigDecimal!]
  borrowRate_not_in: [BigDecimal!]
  accFeeIndex: BigDecimal
  accFeeIndex_not: BigDecimal
  accFeeIndex_gt: BigDecimal
  accFeeIndex_lt: BigDecimal
  accFeeIndex_gte: BigDecimal
  accFeeIndex_lte: BigDecimal
  accFeeIndex_in: [BigDecimal!]
  accFeeIndex_not_in: [BigDecimal!]
  lastFeeIndex: BigDecimal
  lastFeeIndex_not: BigDecimal
  lastFeeIndex_gt: BigDecimal
  lastFeeIndex_lt: BigDecimal
  lastFeeIndex_gte: BigDecimal
  lastFeeIndex_lte: BigDecimal
  lastFeeIndex_in: [BigDecimal!]
  lastFeeIndex_not_in: [BigDecimal!]
  lastBlockNumber: BigInt
  lastBlockNumber_not: BigInt
  lastBlockNumber_gt: BigInt
  lastBlockNumber_lt: BigInt
  lastBlockNumber_gte: BigInt
  lastBlockNumber_lte: BigInt
  lastBlockNumber_in: [BigInt!]
  lastBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum PoolData_orderBy {
  id
  address
  tokenBalances
  lpTokenBalance
  lpTokenBorrowed
  lpTokenBorrowedPlusInterest
  lpTokenTotal
  borrowRate
  accFeeIndex
  lastFeeIndex
  lastBlockNumber
}

input Pool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  cfmm: Bytes
  cfmm_not: Bytes
  cfmm_in: [Bytes!]
  cfmm_not_in: [Bytes!]
  cfmm_contains: Bytes
  cfmm_not_contains: Bytes
  protocolId: BigInt
  protocolId_not: BigInt
  protocolId_gt: BigInt
  protocolId_lt: BigInt
  protocolId_gte: BigInt
  protocolId_lte: BigInt
  protocolId_in: [BigInt!]
  protocolId_not_in: [BigInt!]
  protocol: Bytes
  protocol_not: Bytes
  protocol_in: [Bytes!]
  protocol_not_in: [Bytes!]
  protocol_contains: Bytes
  protocol_not_contains: Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Pool_orderBy {
  id
  address
  cfmm
  protocolId
  protocol
  count
}

type Query {
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  poolData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolData
  poolDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolData_orderBy
    orderDirection: OrderDirection
    where: PoolData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolData!]!
  loan(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Loan
  loans(
    skip: Int = 0
    first: Int = 100
    orderBy: Loan_orderBy
    orderDirection: OrderDirection
    where: Loan_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Loan!]!
  loanData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanData
  loanDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanData_orderBy
    orderDirection: OrderDirection
    where: LoanData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanData!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  poolData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolData
  poolDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolData_orderBy
    orderDirection: OrderDirection
    where: PoolData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolData!]!
  loan(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Loan
  loans(
    skip: Int = 0
    first: Int = 100
    orderBy: Loan_orderBy
    orderDirection: OrderDirection
    where: Loan_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Loan!]!
  loanData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanData
  loanDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanData_orderBy
    orderDirection: OrderDirection
    where: LoanData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanData!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type User {
  id: ID!
  address: Bytes!
  depositedPools: [Bytes!]!
  loans: [BigInt!]!
}

input User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  depositedPools: [Bytes!]
  depositedPools_not: [Bytes!]
  depositedPools_contains: [Bytes!]
  depositedPools_contains_nocase: [Bytes!]
  depositedPools_not_contains: [Bytes!]
  depositedPools_not_contains_nocase: [Bytes!]
  loans: [BigInt!]
  loans_not: [BigInt!]
  loans_contains: [BigInt!]
  loans_contains_nocase: [BigInt!]
  loans_not_contains: [BigInt!]
  loans_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum User_orderBy {
  id
  address
  depositedPools
  loans
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}